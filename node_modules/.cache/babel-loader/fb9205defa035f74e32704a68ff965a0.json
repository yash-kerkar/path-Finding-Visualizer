{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASH\\\\path-find-visualizer\\\\src\\\\my components\\\\PathFindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from './Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 8;\nconst START_NODE_COL = 20;\nconst FINISH_NODE_ROW = 5;\nconst FINISH_NODE_COL = 30;\nexport default class PathFindVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    let grid = this.createGrid();\n    this.setState({\n      grid: grid\n    });\n  }\n\n  animateDijkstra(visitedNodes) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodes[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({\n          grid: newGrid\n        });\n      }, 1000 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodes = dijkstra(grid, startNode, finishNode);\n    this.animateDijkstra(visitedNodes);\n  }\n\n  createGrid() {\n    let grid = [];\n\n    for (let row = 0; row < this.props.i; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.props.j; col++) {\n        const currentNode = {\n          row,\n          col,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          parentNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    let align = {\n      textAlign: \"center\",\n      fontSize: \"0\"\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \" Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: align,\n        className: \"my-3\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                isStart,\n                isFinish,\n                isVisited\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                isStart: isStart,\n                isFinish: isFinish,\n                isVisited: isVisited\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 27\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/my components/PathFindingVisualizer.js"],"names":["React","Component","Node","dijkstra","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFindVisualizer","constructor","props","state","grid","componentDidMount","createGrid","setState","animateDijkstra","visitedNodes","i","length","setTimeout","node","newGrid","slice","newNode","isVisited","row","col","visualizeDijkstra","startNode","finishNode","currentRow","j","currentNode","isStart","isFinish","distance","Infinity","isWall","parentNode","push","render","align","textAlign","fontSize","map","rowIdx","nodeIdx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Node from './Node';\r\nimport { dijkstra } from '../algorithms/dijkstra';\r\nconst START_NODE_ROW = 8;\r\nconst START_NODE_COL = 20;\r\nconst FINISH_NODE_ROW = 5;\r\nconst FINISH_NODE_COL = 30;\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {grid:[]};\r\n    }\r\n\r\n    componentDidMount(){\r\n        let grid = this.createGrid()\r\n        this.setState({grid:grid})\r\n    }\r\n\r\n    animateDijkstra(visitedNodes){\r\n        for(let i=0;i<visitedNodes.length;i++){\r\n            setTimeout(()=>{\r\n             const node = visitedNodes[i]\r\n         const newGrid = this.state.grid.slice();\r\n         const newNode = {\r\n             ...node,\r\n             isVisited:true\r\n         };\r\n         newGrid[node.row][node.col] = newNode\r\n             this.setState({grid:newGrid});\r\n            },1000* i);\r\n        }\r\n    }\r\n\r\n    visualizeDijkstra(){\r\n       const {grid} = this.state\r\n       const startNode = grid[START_NODE_ROW][START_NODE_COL]\r\n       const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL]\r\n       const visitedNodes = dijkstra(grid,startNode,finishNode)\r\n       this.animateDijkstra(visitedNodes)\r\n       \r\n    }\r\n\r\n    createGrid(){\r\n        let grid = [];\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            let currentRow = []\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                const currentNode = {\r\n                    row,\r\n                    col,\r\n                    isStart:row===START_NODE_ROW && col=== START_NODE_COL,\r\n                    isFinish:row===FINISH_NODE_ROW && col=== FINISH_NODE_COL,\r\n                    distance:Infinity,\r\n                    isVisited:false,\r\n                    isWall:false,\r\n                    parentNode:null\r\n                }\r\n                currentRow.push(currentNode)\r\n            }\r\n            grid.push(currentRow)\r\n        }\r\n        return grid\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        let align = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        return(\r\n        <>\r\n        <button onClick={()=>this.visualizeDijkstra()}> Visualize Dijkstra's Algorithm</button>\r\n        <div style={align} className=\"my-3\">\r\n        {\r\n          grid.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {isStart,isFinish,isVisited} = node\r\n                  return (<Node key={nodeIdx} isStart={isStart} isFinish={isFinish} isVisited={isVisited}></Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}