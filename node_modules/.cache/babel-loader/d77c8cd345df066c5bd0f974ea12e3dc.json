{"ast":null,"code":"import { findByPlaceholderText } from \"@testing-library/react\";\nexport function dijkstra(grid, startNode, finishNode) {\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  let i = 0;\n\n  while (i < unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const minNode = unvisitedNodes.shift();\n    minNode.isVisited = true;\n    if (minNode === finishNode) return findPath(grid, finishNode);\n    updateNeighbours(minNode, grid);\n  }\n}\n\nfunction getAllNodes(grid) {\n  let temp = [];\n  console.log(grid);\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (!grid[i][j].isVisited) {\n        temp.push(grid[i][j]);\n      }\n    }\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbours(node, grid) {\n  const {\n    row,\n    col\n  } = node;\n\n  if (row > 0 && grid[row - 1][col].isVisited !== true && grid[row - 1][col].distance > node.distance + 1) {\n    grid[row - 1][col].distance = node.distance + 1;\n    grid[row - 1][col].parentNode = node;\n  }\n\n  if (row < grid.length && grid[row + 1][col] !== true && grid[row + 1][col].distance > node.distance + 1) {\n    grid[row + 1][[col]].distance = node.distance + 1;\n    grid[row + 1][col].parentNode = node;\n  }\n\n  if (col > 0 && grid[row][col - 1] !== true && grid[row][col - 1].distance > node.distance + 1) {\n    grid[row][col - 1].distance = node.distance + 1;\n    grid[row][col - 1].parentNode = node;\n  }\n\n  if (col < grid[0].length && grid[row][col + 1] !== true && grid[row][col + 1].distance > node.distance + 1) {\n    grid[row][col + 1].distance = node.distance + 1;\n    grid[row][col + 1].parentNode = node;\n  }\n}\n\nfunction findPath(grid, finishNode) {\n  return \"success\";\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/algorithms/dijkstra.js"],"names":["findByPlaceholderText","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","getAllNodes","i","length","sortNodesByDistance","minNode","shift","isVisited","findPath","updateNeighbours","temp","console","log","j","push","sort","nodeA","nodeB","node","row","col","parentNode"],"mappings":"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","sourcesContent":["import { findByPlaceholderText } from \"@testing-library/react\";\r\n\r\nexport function dijkstra(grid,startNode,finishNode){\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    let i = 0;\r\n    while(i < unvisitedNodes.length){\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const minNode = unvisitedNodes.shift()\r\n        minNode.isVisited = true\r\n        if(minNode === finishNode) return findPath(grid,finishNode)\r\n        updateNeighbours(minNode,grid)\r\n    }\r\n\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    let temp = []\r\n    console.log(grid)\r\n    for(let i=0; i < grid.length; i++){\r\n        for(let j=0; j <grid[i].length; j++){\r\n            if(!grid[i][j].isVisited){\r\n                temp.push(grid[i][j])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA,nodeB)=>nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateNeighbours(node,grid){\r\n    const {row,col} = node;\r\n    if(row > 0 && grid[row-1][col].isVisited !== true && grid[row-1][col].distance > node.distance + 1){\r\n        grid[row-1][col].distance = node.distance + 1;\r\n        grid[row-1][col].parentNode = node\r\n    }\r\n    if(row < grid.length && grid[row+1][col] !== true && grid[row+1][col].distance > node.distance + 1){\r\n        grid[row+1][[col]].distance = node.distance + 1\r\n        grid[row+1][col].parentNode = node\r\n    }\r\n    if(col > 0 && grid[row][col-1] !== true && grid[row][col-1].distance > node.distance + 1){\r\n        grid[row][col-1].distance = node.distance + 1\r\n        grid[row][col-1].parentNode = node\r\n    }\r\n    if(col < grid[0].length && grid[row][col+1] !== true && grid[row][col+1].distance > node.distance + 1){\r\n        grid[row][col+1].distance = node.distance + 1\r\n        grid[row][col+1].parentNode = node\r\n    }\r\n}\r\n\r\nfunction findPath(grid,finishNode){\r\n    return \"success\"\r\n}"]},"metadata":{},"sourceType":"module"}