{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASH\\\\path-find-visualizer\\\\src\\\\mycomponents\\\\PathFindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from './Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class PathFindVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {\n        row: 15,\n        col: 2\n      },\n      finishNode: {\n        row: 15,\n        col: 20\n      },\n      mousePressed: false,\n      clickedOnStartNode: false,\n      clickedOnFinishNode: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = this.createGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  selectStartNode() {\n    if (this.state.clickedOnStartNode) this.setState({\n      clickedOnStartNode: false\n    });else this.setState({\n      clickedOnStartNode: true\n    });\n  }\n\n  selectFinishNode() {\n    if (this.state.clickedOnFinishNode) this.setState({\n      clickedOnFinishNode: false\n    });else this.setState({\n      clickedOnFinishNode: true\n    });\n  }\n\n  handleMouseDown(row, col) {\n    if (this.state.clickedOnStartNode) {\n      const newGrid = this.state.grid.slice();\n      const node1 = newGrid[row][col];\n      const node2 = newGrid[this.state.startNode.row][this.state.startNode.col];\n      const newNode1 = { ...node1,\n        isStart: true\n      };\n      const newNode2 = { ...node2,\n        isStart: false\n      };\n      newGrid[row][col] = newNode1;\n      newGrid[this.state.startNode.row][this.state.startNode.col] = newNode2;\n      this.setState({\n        grid: newGrid,\n        startNode: {\n          row,\n          col\n        },\n        clickedOnStartNode: false\n      });\n    } else if (this.state.clickedOnFinishNode) {\n      const newGrid = this.state.grid.slice();\n      const node1 = newGrid[row][col];\n      const node2 = newGrid[this.state.finishNode.row][this.state.finishNode.col];\n      const newNode1 = { ...node1,\n        isFinish: true\n      };\n      const newNode2 = { ...node2,\n        isFinish: false\n      };\n      newGrid[row][col] = newNode1;\n      newGrid[this.state.finishNode.row][this.state.finishNode.col] = newNode2;\n      this.setState({\n        grid: newGrid,\n        finishNode: {\n          row,\n          col\n        },\n        clickedOnFinishNode: false\n      });\n    } else {\n      const newGrid = creatGridWallToglled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mousePressed: true\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mousePressed) {\n      const newGrid = creatGridWallToglled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    this.setState({\n      mousePressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodes, path) {\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          this.animateShortestPath(path);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({\n          grid: newGrid\n        });\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(path) {\n    for (let j = 0; j < path.length; j++) {\n      setTimeout(() => {\n        const node = path[j];\n        const newGrid = this.state.grid.slice();\n        const newNode = { ...node,\n          isVisited: false,\n          isInPath: true\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({\n          grid: newGrid\n        });\n      }, 25 * j);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[this.state.startNode.row][this.state.startNode.col];\n    const finishNode = grid[this.state.finishNode.row][this.state.finishNode.col];\n    console.log(finishNode);\n    const [visitedNodes, path] = dijkstra(grid, startNode, finishNode);\n    let grid1 = this.refreshGrid();\n    this.setState({\n      grid: grid1\n    });\n    this.animateDijkstra(visitedNodes, path);\n  }\n\n  refreshGrid() {\n    const newGrid = this.state.grid.slice();\n\n    for (let row = 0; row < this.props.i; row++) {\n      for (let col = 0; col < this.props.j; col++) {\n        let node = newGrid[row][col];\n        const currentNode = { ...node,\n          isVisited: false\n        };\n        newGrid[row][col] = currentNode;\n      }\n    }\n\n    return newGrid;\n  }\n\n  createGrid() {\n    let grid = [];\n\n    for (let row = 0; row < this.props.i; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.props.j; col++) {\n        let currentNode = {\n          row,\n          col,\n          isStart: row === this.state.startNode.row && col === this.state.startNode.col,\n          isFinish: row === this.state.finishNode.row && col === this.state.finishNode.col,\n          distance: Infinity,\n          isWall: false,\n          isInPath: false,\n          isVisited: false,\n          parentNode: null,\n          isBorder: false\n        };\n\n        if (row == 0 || col == 0 || row == 29 || col == 59) {\n          currentNode.isBorder = true;\n        }\n\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    let align = {\n      textAlign: \"center\",\n      fontSize: \"0\"\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.visualizeDijkstra(),\n          children: \" Visualize Dijkstra's Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.selectStartNode(),\n          style: {\n            marginLeft: \"5px\",\n            marginRight: \"5px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.componentDidMount(),\n            style: {\n              marginLeft: \"5px\",\n              marginRight: \"5px\"\n            },\n            children: \" Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Start Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.selectFinishNode(),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-finish\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Finish Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            marginLeft: \"5px\",\n            marginRight: \"5px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-isWall\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Wall Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: align,\n          className: \"my-3\",\n          children: grid.map((row, rowIdx) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: row.map((node, nodeIdx) => {\n                const {\n                  row,\n                  isStart,\n                  isFinish,\n                  isVisited,\n                  isInPath,\n                  isWall,\n                  col,\n                  isBorder\n                } = node;\n                return /*#__PURE__*/_jsxDEV(Node, {\n                  row: row,\n                  col: col,\n                  isStart: isStart,\n                  isFinish: isFinish,\n                  isWall: isWall,\n                  isVisited: isVisited,\n                  isInPath: isInPath,\n                  isBorder: isBorder,\n                  onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                  onMouseUp: (row, col) => this.handleMouseUp(row, col),\n                  onMouseEnter: (row, col) => this.handleMouseEnter(row, col)\n                }, nodeIdx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 27\n                }, this);\n              })\n            }, rowIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst creatGridWallToglled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  console.log(newGrid);\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/mycomponents/PathFindingVisualizer.js"],"names":["React","Component","Node","dijkstra","PathFindVisualizer","constructor","props","state","grid","startNode","row","col","finishNode","mousePressed","clickedOnStartNode","clickedOnFinishNode","componentDidMount","createGrid","setState","selectStartNode","selectFinishNode","handleMouseDown","newGrid","slice","node1","node2","newNode1","isStart","newNode2","isFinish","creatGridWallToglled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodes","path","i","length","setTimeout","animateShortestPath","node","newNode","isVisited","j","isInPath","visualizeDijkstra","console","log","grid1","refreshGrid","currentNode","currentRow","distance","Infinity","isWall","parentNode","isBorder","push","render","align","textAlign","fontSize","marginTop","marginLeft","marginRight","map","rowIdx","nodeIdx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Node from './Node';\r\nimport { dijkstra } from '../algorithms/dijkstra';\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            grid:[],\r\n            startNode:{row:15,col:2},\r\n            finishNode:{row:15,col:20},\r\n            mousePressed:false,\r\n            clickedOnStartNode:false,\r\n            clickedOnFinishNode:false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = this.createGrid()\r\n        this.setState({grid})\r\n    }\r\n\r\n    selectStartNode(){\r\n        if(this.state.clickedOnStartNode) this.setState({clickedOnStartNode:false})\r\n        else this.setState({clickedOnStartNode:true})\r\n    }\r\n\r\n    selectFinishNode(){\r\n        if(this.state.clickedOnFinishNode) this.setState({clickedOnFinishNode:false})\r\n        else this.setState({clickedOnFinishNode:true})\r\n    }\r\n\r\n    handleMouseDown(row,col){\r\n        if(this.state.clickedOnStartNode){\r\n            const newGrid = this.state.grid.slice()\r\n            const node1 = newGrid[row][col]\r\n            const node2 = newGrid[this.state.startNode.row][this.state.startNode.col]\r\n            const newNode1 = {\r\n                ...node1,\r\n               isStart:true,\r\n            };\r\n            const newNode2 = {\r\n                ...node2,\r\n                isStart:false\r\n            }\r\n            newGrid[row][col] = newNode1\r\n            newGrid[this.state.startNode.row][this.state.startNode.col] = newNode2\r\n            this.setState({grid:newGrid,startNode:{row,col},clickedOnStartNode:false})\r\n        }\r\n        else if(this.state.clickedOnFinishNode){\r\n            const newGrid = this.state.grid.slice()\r\n            const node1 = newGrid[row][col]\r\n            const node2 = newGrid[this.state.finishNode.row][this.state.finishNode.col]\r\n            const newNode1 = {\r\n                ...node1,\r\n               isFinish:true,\r\n            };\r\n            const newNode2 = {\r\n                ...node2,\r\n                isFinish:false\r\n            }\r\n            newGrid[row][col] = newNode1\r\n            newGrid[this.state.finishNode.row][this.state.finishNode.col] = newNode2\r\n            this.setState({grid:newGrid,finishNode:{row,col},clickedOnFinishNode:false})\r\n        }\r\n        else{\r\n            const newGrid = creatGridWallToglled(this.state.grid,row,col)\r\n            this.setState({grid:newGrid,mousePressed:true})\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row,col){\r\n        if(this.state.mousePressed){\r\n            const newGrid = creatGridWallToglled(this.state.grid,row,col)\r\n            this.setState({grid:newGrid})\r\n        }\r\n    }\r\n\r\n    handleMouseUp(row,col){\r\n        this.setState({mousePressed:false})\r\n    }\r\n\r\n    animateDijkstra(visitedNodes,path){\r\n        for(let i=0;i<=visitedNodes.length;i++){\r\n            if(i===visitedNodes.length){\r\n                setTimeout(()=>{\r\n                    this.animateShortestPath(path)\r\n                },10*i)\r\n                return\r\n            }\r\n            setTimeout(()=>{\r\n             const node = visitedNodes[i]\r\n         const newGrid = this.state.grid.slice();\r\n         const newNode = {\r\n             ...node,\r\n             isVisited:true\r\n         };\r\n         newGrid[node.row][node.col] = newNode\r\n             this.setState({grid:newGrid});\r\n            },10* i);\r\n        }\r\n       }\r\n\r\n    animateShortestPath(path){\r\n        for(let j =0;j<path.length;j++){\r\n            setTimeout(()=>{\r\n                const node = path[j]\r\n                const newGrid = this.state.grid.slice();\r\n                const newNode = {\r\n                    ...node,\r\n                    isVisited:false,\r\n                    isInPath:true\r\n                };\r\n                newGrid[node.row][node.col] = newNode\r\n                    this.setState({grid:newGrid});\r\n        },25*j)\r\n       }\r\n    }\r\n\r\n    visualizeDijkstra(){\r\n       const {grid} = this.state\r\n       const startNode = grid[this.state.startNode.row][this.state.startNode.col]\r\n       const finishNode = grid[this.state.finishNode.row][this.state.finishNode.col]\r\n       console.log(finishNode)\r\n       const [visitedNodes,path] = dijkstra(grid,startNode,finishNode)\r\n       let grid1 = this.refreshGrid()\r\n       this.setState({grid:grid1})\r\n       this.animateDijkstra(visitedNodes,path)\r\n       \r\n    }\r\n\r\n    refreshGrid(){\r\n        const newGrid = this.state.grid.slice()\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                let node = newGrid[row][col]\r\n                const currentNode = {\r\n                    ...node,\r\n                    isVisited:false\r\n                }\r\n                newGrid[row][col] = currentNode\r\n            }\r\n        }\r\n        return newGrid\r\n    }\r\n\r\n    createGrid(){\r\n        let grid = []\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            let currentRow = []\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                let currentNode = {\r\n                    row,\r\n                    col,\r\n                    isStart:row===this.state.startNode.row && col===this.state.startNode.col,\r\n                    isFinish:row===this.state.finishNode.row && col===this.state.finishNode.col,\r\n                    distance:Infinity,\r\n                    isWall:false,\r\n                    isInPath:false,\r\n                    isVisited:false,\r\n                    parentNode:null,\r\n                    isBorder:false\r\n                }\r\n                if(row == 0 || col == 0 || row == 29 || col == 59){\r\n                    currentNode.isBorder = true\r\n                }\r\n                currentRow.push(currentNode)\r\n            }\r\n            grid.push(currentRow)\r\n        }\r\n        return grid\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        let align = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        return(\r\n        <>\r\n        <div style={{marginTop:\"10px\"}}>\r\n        <button onClick={()=>this.visualizeDijkstra()}> Visualize Dijkstra's Algorithm</button>\r\n        <button onClick={()=>this.selectStartNode()} style={{marginLeft:\"5px\",marginRight:\"5px\"}}>\r\n        <button onClick={()=>this.componentDidMount()} style={{marginLeft:\"5px\",marginRight:\"5px\"}}> Reset</button>\r\n        <div className=\"node-start\"></div>\r\n        <p>Start Node</p>\r\n        </button>\r\n        <button onClick={()=>this.selectFinishNode()}>\r\n        <div className=\"node-finish\"></div>\r\n        <p>Finish Node</p>\r\n        </button>\r\n        <button style={{marginLeft:\"5px\",marginRight:\"5px\"}}>\r\n        <div className=\"node-isWall\" ></div>\r\n        <p>Wall Node</p>\r\n        </button>\r\n        <div style={align} className=\"my-3\">\r\n        {\r\n          grid.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {row,isStart,isFinish,isVisited,isInPath,isWall,col,isBorder} = node\r\n                  return (<Node key={nodeIdx} \r\n                    row={row}\r\n                    col={col}\r\n                    isStart={isStart} \r\n                    isFinish={isFinish} \r\n                    isWall={isWall}\r\n                    isVisited={isVisited} \r\n                    isInPath={isInPath} \r\n                    isBorder={isBorder}\r\n                    onMouseDown={(row,col)=>this.handleMouseDown(row,col)}\r\n                    onMouseUp={(row,col)=>this.handleMouseUp(row,col)}\r\n                    onMouseEnter={(row,col)=>this.handleMouseEnter(row,col)}>\r\n                     </Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\nconst creatGridWallToglled = (grid,row,col) => {\r\n    const newGrid = grid.slice()\r\n    console.log(newGrid)\r\n    const node = newGrid[row][col]\r\n    const newNode = {\r\n        ...node,\r\n        isWall:!node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode\r\n    return newGrid\r\n}\r\n"]},"metadata":{},"sourceType":"module"}