{"ast":null,"code":"import { findByPlaceholderText } from \"@testing-library/react\";\nexport function dijkstra(grid, startNode, finishNode) {\n  let grid1 = grid.slice();\n  const visitedNodesInOrder = [];\n  grid1[startNode.row][startNode.col].distance = 0;\n  const unvisitedNodes = getAllNodes(grid1);\n  let i = 0;\n\n  while (i < unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const minNode = unvisitedNodes.shift();\n    minNode.isVisited = true;\n    visitedNodesInOrder.push(minNode);\n    if (minNode === finishNode) return visitedNodesInOrder;\n    updateNeighbours(minNode, grid1);\n  }\n}\n\nfunction getAllNodes(grid) {\n  let temp = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (!grid[i][j].isVisited) {\n        temp.push(grid[i][j]);\n      }\n    }\n  }\n\n  return temp;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbours(node, grid) {\n  const {\n    row,\n    col\n  } = node;\n\n  if (row > 0 && grid[row - 1][col].isVisited !== true && grid[row - 1][col].distance > node.distance + 1) {\n    grid[row - 1][col].distance = node.distance + 1;\n    grid[row - 1][col].parentNode = node;\n  }\n\n  if (row < grid.length - 1 && grid[row + 1][col] !== true && grid[row + 1][col].distance > node.distance + 1) {\n    grid[row + 1][[col]].distance = node.distance + 1;\n    grid[row + 1][col].parentNode = node;\n  }\n\n  if (col > 0 && grid[row][col - 1] !== true && grid[row][col - 1].distance > node.distance + 1) {\n    grid[row][col - 1].distance = node.distance + 1;\n    grid[row][col - 1].parentNode = node;\n  }\n\n  if (col < grid[0].length - 1 && grid[row][col + 1] !== true && grid[row][col + 1].distance > node.distance + 1) {\n    grid[row][col + 1].distance = node.distance + 1;\n    grid[row][col + 1].parentNode = node;\n  }\n}\n\nfunction findPath(finishNode) {\n  let temp = [];\n\n  while (finishNode.isStart !== true) {\n    temp.push(finishNode.parentNode);\n    finishNode = finishNode.parentNode;\n  }\n\n  return temp.reverse();\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/algorithms/dijkstra.js"],"names":["findByPlaceholderText","dijkstra","grid","startNode","finishNode","grid1","slice","visitedNodesInOrder","row","col","distance","unvisitedNodes","getAllNodes","i","length","sortNodesByDistance","minNode","shift","isVisited","push","updateNeighbours","temp","j","sort","nodeA","nodeB","node","parentNode","findPath","isStart","reverse"],"mappings":"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","sourcesContent":["import { findByPlaceholderText } from \"@testing-library/react\";\r\n\r\nexport function dijkstra(grid,startNode,finishNode){\r\n    let grid1 = grid.slice()\r\n    const visitedNodesInOrder = []\r\n    grid1[startNode.row][startNode.col].distance = 0\r\n    const unvisitedNodes = getAllNodes(grid1);\r\n    let i = 0;\r\n    while(i < unvisitedNodes.length){\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const minNode = unvisitedNodes.shift()\r\n        minNode.isVisited = true\r\n        visitedNodesInOrder.push(minNode)\r\n        if(minNode === finishNode) return visitedNodesInOrder\r\n        updateNeighbours(minNode,grid1)\r\n    }\r\n\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    let temp = []\r\n    for(let i=0; i < grid.length; i++){\r\n        for(let j=0; j <grid[i].length; j++){\r\n            if(!grid[i][j].isVisited){\r\n                temp.push(grid[i][j])\r\n            }\r\n        }\r\n    }\r\n    return temp\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA,nodeB)=>nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateNeighbours(node,grid){\r\n    const {row,col} = node;\r\n    if(row > 0 && grid[row-1][col].isVisited !== true && grid[row-1][col].distance > node.distance + 1){\r\n        grid[row-1][col].distance = node.distance + 1;\r\n        grid[row-1][col].parentNode = node\r\n    }\r\n    if(row < grid.length-1 && grid[row+1][col] !== true && grid[row+1][col].distance > node.distance + 1){\r\n        grid[row+1][[col]].distance = node.distance + 1\r\n        grid[row+1][col].parentNode = node\r\n    }\r\n    if(col > 0 && grid[row][col-1] !== true && grid[row][col-1].distance > node.distance + 1){\r\n        grid[row][col-1].distance = node.distance + 1\r\n        grid[row][col-1].parentNode = node\r\n    }\r\n    if(col < grid[0].length-1 && grid[row][col+1] !== true && grid[row][col+1].distance > node.distance + 1){\r\n        grid[row][col+1].distance = node.distance + 1\r\n        grid[row][col+1].parentNode = node\r\n    }\r\n}\r\n\r\nfunction findPath(finishNode){\r\n    let temp = []\r\n    while(finishNode.isStart !== true){\r\n        temp.push(finishNode.parentNode)\r\n        finishNode = finishNode.parentNode\r\n    }\r\n    return temp.reverse()\r\n}"]},"metadata":{},"sourceType":"module"}