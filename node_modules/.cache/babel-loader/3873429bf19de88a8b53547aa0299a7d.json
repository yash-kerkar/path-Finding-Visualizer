{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASH\\\\path-find-visualizer\\\\src\\\\my components\\\\PathFindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from './Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 8;\nconst START_NODE_COL = 20;\nconst FINISH_NODE_ROW = 5;\nconst FINISH_NODE_COL = 30;\nexport default class PathFindVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    let grid = [];\n\n    for (let row = 0; row < this.props.i; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.props.j; col++) {\n        const currentNode = {\n          row,\n          col,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          parentNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    this.setState({\n      grid: grid\n    });\n  }\n\n  visualizeDijkstra(grid) {\n    let visitedNodes = dijkstra(grid, grid[START_NODE_ROW][START_NODE_COL], grid[FINISH_NODE_ROW][FINISH_NODE_COL]);\n    /*for(let i=0;i<visitedNodes.length;i++){\r\n     const node = visitedNodes[i]\r\n     const newGrid = this.state.grid.slice()\r\n     const newNode = {\r\n         ...node,\r\n         isVisited:true\r\n     };\r\n     newGrid[node.row][node.col] = newNode\r\n        setTimeout(()=>{\r\n         this.setState({grid:newGrid});\r\n        },1000* i);\r\n        this.setState({grid:newGrid});\r\n    }*/\n\n    let i = 0;\n\n    let timeoutfunc = () => {\n      console.log(\"yes\", i);\n      const node = visitedNodes[i];\n      const newGrid = this.state.grid.slice();\n      const newNode = { ...node,\n        isVisited: true\n      };\n      newGrid[node.row][node.col] = newNode;\n      this.setState({\n        grid: newGrid\n      });\n\n      if (i < visitedNodes.length - 1) {\n        setTimeout(timeoutfunc, 1000);\n      }\n\n      i++;\n    };\n\n    timeoutfunc();\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    let align = {\n      textAlign: \"center\",\n      fontSize: \"0\"\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(this.state.grid),\n        children: \" Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: align,\n        className: \"my-3\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                isStart,\n                isFinish,\n                isVisited\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                isStart: isStart,\n                isFinish: isFinish,\n                isVisited: isVisited\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 27\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/my components/PathFindingVisualizer.js"],"names":["React","Component","Node","dijkstra","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFindVisualizer","constructor","props","state","grid","componentDidMount","row","i","currentRow","col","j","currentNode","isStart","isFinish","distance","Infinity","isVisited","isWall","parentNode","push","setState","visualizeDijkstra","visitedNodes","timeoutfunc","console","log","node","newGrid","slice","newNode","length","setTimeout","render","align","textAlign","fontSize","map","rowIdx","nodeIdx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Node from './Node';\r\nimport { dijkstra } from '../algorithms/dijkstra';\r\nconst START_NODE_ROW = 8;\r\nconst START_NODE_COL = 20;\r\nconst FINISH_NODE_ROW = 5;\r\nconst FINISH_NODE_COL = 30;\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {grid:[]};\r\n    }\r\n\r\n    componentDidMount(){\r\n        let grid = [];\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            let currentRow = []\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                const currentNode = {\r\n                    row,\r\n                    col,\r\n                    isStart:row===START_NODE_ROW && col=== START_NODE_COL,\r\n                    isFinish:row===FINISH_NODE_ROW && col=== FINISH_NODE_COL,\r\n                    distance:Infinity,\r\n                    isVisited:false,\r\n                    isWall:false,\r\n                    parentNode:null\r\n                }\r\n                currentRow.push(currentNode)\r\n            }\r\n            grid.push(currentRow)\r\n        }\r\n        this.setState({grid:grid})\r\n    }\r\n\r\n    visualizeDijkstra(grid){\r\n       let visitedNodes = dijkstra(grid,grid[START_NODE_ROW][START_NODE_COL],grid[FINISH_NODE_ROW][FINISH_NODE_COL])\r\n       /*for(let i=0;i<visitedNodes.length;i++){\r\n        const node = visitedNodes[i]\r\n        const newGrid = this.state.grid.slice()\r\n        const newNode = {\r\n            ...node,\r\n            isVisited:true\r\n        };\r\n        newGrid[node.row][node.col] = newNode\r\n           setTimeout(()=>{\r\n            this.setState({grid:newGrid});\r\n           },1000* i);\r\n           this.setState({grid:newGrid});\r\n       }*/\r\n       let i = 0\r\n       let timeoutfunc = ()=>{\r\n        console.log(\"yes\",i)\r\n        const node = visitedNodes[i]\r\n        const newGrid = this.state.grid.slice()\r\n        const newNode = {\r\n            ...node,\r\n            isVisited:true\r\n        };\r\n        newGrid[node.row][node.col] = newNode\r\n        this.setState({grid:newGrid})\r\n        if(i < (visitedNodes.length-1)){\r\n            setTimeout(timeoutfunc,1000)\r\n        }\r\n        i++\r\n       }\r\n\r\n       timeoutfunc()\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        let align = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        return(\r\n        <>\r\n        <button onClick={()=>this.visualizeDijkstra(this.state.grid)}> Visualize Dijkstra's Algorithm</button>\r\n        <div style={align} className=\"my-3\">\r\n        {\r\n          grid.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {isStart,isFinish,isVisited} = node\r\n                  return (<Node key={nodeIdx} isStart={isStart} isFinish={isFinish} isVisited={isVisited}></Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}