{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  let i = 0;\n\n  while (i < unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const minNode = unvisitedNodes.shift();\n    if (minNode.distance === Infinity) return [visitedNodesInOrder, null];\n    if (minNode.isWall) continue;\n    minNode.isVisited = true;\n    visitedNodesInOrder.push(minNode);\n    if (minNode === finishNode) return [visitedNodesInOrder, findPath(finishNode)];\n    updateNeighbours(minNode, grid);\n  }\n}\n\nfunction getAllNodes(grid) {\n  let temp = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (!grid[i][j].isVisited) {\n        temp.push(grid[i][j]);\n      }\n    }\n  }\n\n  return temp;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbours(node, grid) {\n  const {\n    row,\n    col\n  } = node;\n\n  if (row > 0 && grid[row - 1][col].isVisited !== true && grid[row - 1][col].distance > node.distance + 1) {\n    grid[row - 1][col].distance = node.distance + 1;\n    grid[row - 1][col].parentNode = node;\n  }\n\n  if (row < grid.length - 1 && grid[row + 1][col] !== true && grid[row + 1][col].distance > node.distance + 1) {\n    grid[row + 1][[col]].distance = node.distance + 1;\n    grid[row + 1][col].parentNode = node;\n  }\n\n  if (col > 0 && grid[row][col - 1] !== true && grid[row][col - 1].distance > node.distance + 1) {\n    grid[row][col - 1].distance = node.distance + 1;\n    grid[row][col - 1].parentNode = node;\n  }\n\n  if (col < grid[0].length - 1 && grid[row][col + 1] !== true && grid[row][col + 1].distance > node.distance + 1) {\n    grid[row][col + 1].distance = node.distance + 1;\n    grid[row][col + 1].parentNode = node;\n  }\n}\n\nfunction findPath(finishNode) {\n  let temp = [];\n\n  while (finishNode.isStart !== true) {\n    temp.push(finishNode.parentNode);\n    finishNode = finishNode.parentNode;\n  }\n\n  return temp.reverse();\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","i","length","sortNodesByDistance","minNode","shift","Infinity","isWall","isVisited","push","findPath","updateNeighbours","temp","j","sort","nodeA","nodeB","node","row","col","parentNode","isStart","reverse"],"mappings":"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","sourcesContent":["\r\nexport function dijkstra(grid,startNode,finishNode){\r\n    const visitedNodesInOrder = []\r\n    startNode.distance = 0\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    let i = 0;\r\n    while(i < unvisitedNodes.length){\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const minNode = unvisitedNodes.shift()\r\n        if(minNode.distance === Infinity) return [visitedNodesInOrder,null]\r\n        if(minNode.isWall) continue\r\n        minNode.isVisited = true\r\n        visitedNodesInOrder.push(minNode)\r\n        if(minNode === finishNode) return [visitedNodesInOrder,findPath(finishNode)]\r\n        updateNeighbours(minNode,grid)\r\n    }\r\n\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    let temp = []\r\n    for(let i=0; i < grid.length; i++){\r\n        for(let j=0; j <grid[i].length; j++){\r\n            if(!grid[i][j].isVisited){\r\n                temp.push(grid[i][j])\r\n            }\r\n        }\r\n    }\r\n    return temp\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA,nodeB)=>nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateNeighbours(node,grid){\r\n    const {row,col} = node;\r\n    if(row > 0 && grid[row-1][col].isVisited !== true && grid[row-1][col].distance > node.distance + 1){\r\n        grid[row-1][col].distance = node.distance + 1;\r\n        grid[row-1][col].parentNode = node\r\n    }\r\n    if(row < grid.length-1 && grid[row+1][col] !== true && grid[row+1][col].distance > node.distance + 1){\r\n        grid[row+1][[col]].distance = node.distance + 1\r\n        grid[row+1][col].parentNode = node\r\n    }\r\n    if(col > 0 && grid[row][col-1] !== true && grid[row][col-1].distance > node.distance + 1){\r\n        grid[row][col-1].distance = node.distance + 1\r\n        grid[row][col-1].parentNode = node\r\n    }\r\n    if(col < grid[0].length-1 && grid[row][col+1] !== true && grid[row][col+1].distance > node.distance + 1){\r\n        grid[row][col+1].distance = node.distance + 1\r\n        grid[row][col+1].parentNode = node\r\n    }\r\n}\r\n\r\nfunction findPath(finishNode){\r\n    let temp = []\r\n    while(finishNode.isStart !== true){\r\n        temp.push(finishNode.parentNode)\r\n        finishNode = finishNode.parentNode\r\n    }\r\n    return temp.reverse()\r\n}"]},"metadata":{},"sourceType":"module"}