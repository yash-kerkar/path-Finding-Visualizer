{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASH\\\\path-find-visualizer\\\\src\\\\my components\\\\PathFindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from './Node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class PathFindVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let i = 0; i < this.props.i; i++) {\n      let row = [];\n\n      for (let j = 0; j < this.props.j; j++) {\n        const currentNode = {\n          row: i,\n          col: j,\n          isStart: row == 10 && col == 20,\n          isFinish: row == 5 && col == 50\n        };\n        row.push(currentNode);\n      }\n\n      nodes.push(row);\n    }\n\n    this.setState({\n      nodes: nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    let grid = {\n      textAlign: \"center\",\n      fontSize: \"0\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: grid,\n      className: \"my-3\",\n      children: nodes.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIdx) => {\n            const {\n              isStart,\n              isFinish\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              isStart: isStart,\n              isFinish: isFinish\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 27\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 22\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/my components/PathFindingVisualizer.js"],"names":["React","Component","Node","PathFindVisualizer","constructor","props","state","nodes","componentDidMount","i","row","j","currentNode","col","isStart","isFinish","push","setState","render","grid","textAlign","fontSize","map","rowIdx","node","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,eAAe,MAAMC,kBAAN,SAAiCF,SAAjC,CAA2C;AACtDG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAC;AAAP,KAAb;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,QAAID,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWI,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACnC,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,KAAL,CAAWM,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACnC,cAAMC,WAAW,GAAG;AAChBF,UAAAA,GAAG,EAACD,CADY;AAEhBI,UAAAA,GAAG,EAACF,CAFY;AAGhBG,UAAAA,OAAO,EAACJ,GAAG,IAAE,EAAL,IAAWG,GAAG,IAAE,EAHR;AAIhBE,UAAAA,QAAQ,EAACL,GAAG,IAAE,CAAL,IAAUG,GAAG,IAAE;AAJR,SAApB;AAMAH,QAAAA,GAAG,CAACM,IAAJ,CAASJ,WAAT;AACH;;AACDL,MAAAA,KAAK,CAACS,IAAN,CAAWN,GAAX;AACH;;AACD,SAAKO,QAAL,CAAc;AAACV,MAAAA,KAAK,EAACA;AAAP,KAAd;AACH;;AAEDW,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACX,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACA,QAAIa,IAAI,GAAG;AACPC,MAAAA,SAAS,EAAC,QADH;AAEPC,MAAAA,QAAQ,EAAC;AAFF,KAAX;AAIA,wBACA;AAAK,MAAA,KAAK,EAAEF,IAAZ;AAAkB,MAAA,SAAS,EAAC,MAA5B;AAAA,gBAEEZ,KAAK,CAACe,GAAN,CAAU,CAACZ,GAAD,EAAKa,MAAL,KAAc;AACpB,4BAAO;AAAA,oBACFb,GAAG,CAACY,GAAJ,CAAQ,CAACE,IAAD,EAAMC,OAAN,KAAkB;AAC3B,kBAAM;AAACX,cAAAA,OAAD;AAASC,cAAAA;AAAT,gBAAqBS,IAA3B;AACA,gCAAQ,QAAC,IAAD;AAAoB,cAAA,OAAO,EAAEV,OAA7B;AAAsC,cAAA,QAAQ,EAAEC;AAAhD,eAAWU,OAAX;AAAA;AAAA;AAAA;AAAA,oBAAR;AACC,WAHA;AADE,WAAUF,MAAV;AAAA;AAAA;AAAA;AAAA,gBAAP;AAMH,OAPD;AAFF;AAAA;AAAA;AAAA;AAAA,YADA;AAcH;;AA5CqD","sourcesContent":["import React, { Component } from 'react';\r\nimport Node from './Node';\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {nodes:[]};\r\n    }\r\n\r\n    componentDidMount(){\r\n        let nodes = [];\r\n        for (let i = 0; i < this.props.i; i++) {\r\n            let row = []\r\n            for (let j = 0; j < this.props.j; j++) {\r\n                const currentNode = {\r\n                    row:i,\r\n                    col:j,\r\n                    isStart:row==10 && col==20,\r\n                    isFinish:row==5 && col==50\r\n                }\r\n                row.push(currentNode)\r\n            }\r\n            nodes.push(row)\r\n        }\r\n        this.setState({nodes:nodes})\r\n    }\r\n\r\n    render(){\r\n        const {nodes} = this.state;\r\n        let grid = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        return(\r\n        <div style={grid} className=\"my-3\">\r\n        {\r\n          nodes.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {isStart,isFinish} = node\r\n                  return (<Node key={nodeIdx} isStart={isStart} isFinish={isFinish}></Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}