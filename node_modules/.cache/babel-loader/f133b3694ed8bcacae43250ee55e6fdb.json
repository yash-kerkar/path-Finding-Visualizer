{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASH\\\\path-find-visualizer\\\\src\\\\my components\\\\PathFindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from './Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 8;\nconst START_NODE_COL = 20;\nconst FINISH_NODE_ROW = 5;\nconst FINISH_NODE_COL = 30;\nexport default class PathFindVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mousePressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = this.createGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = creatGridWallToglled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mousePressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mousePressed) {\n      const newGrid = creatGridWallToglled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    this.setState({\n      mousePressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodes, path) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodes[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({\n          grid: newGrid\n        });\n      }, 30 * i);\n    }\n    /*for(let j =0;j<path.length;j++){\r\n        setTimeout(()=>{\r\n            const node = path[j]\r\n            const newGrid = this.state.grid.slice();\r\n            const newNode = {\r\n                ...node,\r\n                isVisited:false,\r\n                isInPath:true\r\n            };\r\n            newGrid[node.row][node.col] = newNode\r\n                this.setState({grid:newGrid});\r\n      },100*j)\r\n    }*/\n\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const [visitedNodes, path] = dijkstra(grid, startNode, finishNode);\n    let grid1 = this.createGrid();\n    this.setState({\n      grid: grid1\n    });\n    this.animateDijkstra(visitedNodes, path);\n  }\n\n  createGrid() {\n    let grid = [];\n\n    for (let row = 0; row < this.props.i; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.props.j; col++) {\n        const currentNode = {\n          row,\n          col,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          isInPath: false,\n          parentNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    let align = {\n      textAlign: \"center\",\n      fontSize: \"0\"\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \" Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: align,\n        className: \"my-3\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                isStart,\n                isFinish,\n                isVisited,\n                isInPath,\n                isWall,\n                col\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                row: row,\n                col: col,\n                isStart: isStart,\n                isFinish: isFinish,\n                isWall: isWall,\n                isVisited: isVisited,\n                isInPath: isInPath,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseUp: (row, col) => this.handleMouseUp(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col)\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 27\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst creatGridWallToglled = (grid, row, col) => {\n  let newGrid = grid.slice();\n  if (newGrid[row][col].isWall) newGrid[row][col].isWall = false;else newGrid[row][col].isWall = true;\n  return newGrid;\n};","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/my components/PathFindingVisualizer.js"],"names":["React","Component","Node","dijkstra","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFindVisualizer","constructor","props","state","grid","mousePressed","componentDidMount","createGrid","setState","handleMouseDown","row","col","newGrid","creatGridWallToglled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodes","path","i","length","setTimeout","node","slice","newNode","isVisited","visualizeDijkstra","startNode","finishNode","grid1","currentRow","j","currentNode","isStart","isFinish","distance","Infinity","isWall","isInPath","parentNode","push","render","align","textAlign","fontSize","map","rowIdx","nodeIdx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Node from './Node';\r\nimport { dijkstra } from '../algorithms/dijkstra';\r\nconst START_NODE_ROW = 8;\r\nconst START_NODE_COL = 20;\r\nconst FINISH_NODE_ROW = 5;\r\nconst FINISH_NODE_COL = 30;\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            grid:[],\r\n            mousePressed:false,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = this.createGrid()\r\n        this.setState({grid})\r\n    }\r\n\r\n    handleMouseDown(row,col){\r\n        const newGrid = creatGridWallToglled(this.state.grid,row,col)\r\n        this.setState({grid:newGrid,mousePressed:true})\r\n    }\r\n\r\n    handleMouseEnter(row,col){\r\n        if(this.state.mousePressed){\r\n            const newGrid = creatGridWallToglled(this.state.grid,row,col)\r\n            this.setState({grid:newGrid})\r\n        }\r\n    }\r\n\r\n    handleMouseUp(row,col){\r\n        this.setState({mousePressed:false})\r\n    }\r\n\r\n    animateDijkstra(visitedNodes,path){\r\n        for(let i=0;i<visitedNodes.length;i++){\r\n            setTimeout(()=>{\r\n             const node = visitedNodes[i]\r\n         const newGrid = this.state.grid.slice();\r\n         const newNode = {\r\n             ...node,\r\n             isVisited:true\r\n         };\r\n         newGrid[node.row][node.col] = newNode\r\n             this.setState({grid:newGrid});\r\n            },30* i);\r\n        }\r\n        /*for(let j =0;j<path.length;j++){\r\n            setTimeout(()=>{\r\n                const node = path[j]\r\n                const newGrid = this.state.grid.slice();\r\n                const newNode = {\r\n                    ...node,\r\n                    isVisited:false,\r\n                    isInPath:true\r\n                };\r\n                newGrid[node.row][node.col] = newNode\r\n                    this.setState({grid:newGrid});\r\n\r\n        },100*j)\r\n       }*/\r\n       }\r\n\r\n    visualizeDijkstra(){\r\n       const {grid} = this.state\r\n       const startNode = grid[START_NODE_ROW][START_NODE_COL]\r\n       const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL]\r\n       const [visitedNodes,path] = dijkstra(grid,startNode,finishNode)\r\n       let grid1 = this.createGrid()\r\n       this.setState({grid:grid1})\r\n       this.animateDijkstra(visitedNodes,path)\r\n       \r\n    }\r\n\r\n    createGrid(){\r\n        let grid = [];\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            let currentRow = []\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                const currentNode = {\r\n                    row,\r\n                    col,\r\n                    isStart:row===START_NODE_ROW && col=== START_NODE_COL,\r\n                    isFinish:row===FINISH_NODE_ROW && col=== FINISH_NODE_COL,\r\n                    distance:Infinity,\r\n                    isVisited:false,\r\n                    isWall:false,\r\n                    isInPath:false,\r\n                    parentNode:null\r\n                }\r\n                currentRow.push(currentNode)\r\n            }\r\n            grid.push(currentRow)\r\n        }\r\n        return grid\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        let align = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        return(\r\n        <>\r\n        <button onClick={()=>this.visualizeDijkstra()}> Visualize Dijkstra's Algorithm</button>\r\n        <div style={align} className=\"my-3\">\r\n        {\r\n          grid.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {isStart,isFinish,isVisited,isInPath,isWall,col} = node\r\n                  return (<Node key={nodeIdx} \r\n                    row={row}\r\n                    col={col}\r\n                    isStart={isStart} \r\n                    isFinish={isFinish} \r\n                    isWall={isWall}\r\n                    isVisited={isVisited} \r\n                    isInPath={isInPath} \r\n                    onMouseDown={(row,col)=>this.handleMouseDown(row,col)}\r\n                    onMouseUp={(row,col)=>this.handleMouseUp(row,col)}\r\n                    onMouseEnter={(row,col)=>this.handleMouseEnter(row,col)}>\r\n                     </Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\nconst creatGridWallToglled = (grid,row,col) => {\r\n    let newGrid = grid.slice()\r\n    if(newGrid[row][col].isWall) newGrid[row][col].isWall = false\r\n    else newGrid[row][col].isWall = true\r\n    return newGrid\r\n}\r\n"]},"metadata":{},"sourceType":"module"}