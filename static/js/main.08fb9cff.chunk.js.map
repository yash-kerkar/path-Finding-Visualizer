{"version":3,"sources":["mycomponents/Node.js","algorithms/dijkstra.js","mycomponents/PathFindingVisualizer.js","mycomponents/Header.js","mycomponents/About.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","row","col","isFinish","isStart","isVisited","isWall","isBorder","isInPath","onMouseUp","onMouseEnter","onMouseDown","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateNeighbours","node","grid","parentNode","length","findPath","finishNode","temp","push","reverse","PathFindVisualizer","startNode","mousePressed","clickedOnStartNode","clickedOnFinishNode","createGrid","setState","newGrid","slice","node1","node2","newNode1","newNode2","creatGridWallToglled","visitedNodes","path","i","setTimeout","animateShortestPath","newNode","j","console","log","visitedNodesInOrder","getAllNodes","minNode","shift","Infinity","dijkstra","grid1","refreshGrid","animateDijkstra","currentNode","currentRow","style","marginTop","onClick","visualizeDijkstra","selectStartNode","marginLeft","marginRight","selectFinishNode","componentDidMount","textAlign","fontSize","map","rowIdx","nodeIdx","handleMouseDown","handleMouseUp","handleMouseEnter","header","to","fontFamily","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","class","href","role","data-toggle","aria-haspopup","aria-labelledby","About","App","basename","window","location","pathname","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08fb9cff.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render(){\r\n        const {\r\n            row,\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isVisited,\r\n            isWall,\r\n            isBorder,\r\n            isInPath,\r\n            onMouseUp,\r\n            onMouseEnter,\r\n            onMouseDown} = this.props\r\n        const extraClassName = \r\n        isStart?'node-start':\r\n        isFinish?'node-finish':\r\n        isVisited?'node-isvisited':\r\n        isInPath?'node-inPath':\r\n        isWall?'node-isWall':\r\n        isBorder?'node-isBorder':\r\n        'node';\r\n        return(\r\n            <div \r\n            id={\"node-\"+row+\"-\"+col}\r\n            className={extraClassName} \r\n            onMouseDown={()=>onMouseDown(row,col)} \r\n            onMouseEnter={()=>onMouseEnter(row,col)} \r\n            onMouseUp={()=>onMouseUp(row,col)}>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\r\nexport function dijkstra(grid,startNode,finishNode){\r\n    console.log(finishNode)\r\n    const visitedNodesInOrder = []\r\n    startNode.distance = 0\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    let i = 0;\r\n    while(i < unvisitedNodes.length){\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const minNode = unvisitedNodes.shift()\r\n        if(minNode.distance === Infinity) return [visitedNodesInOrder,null]\r\n        if(minNode.isWall || minNode.isBorder) continue\r\n        minNode.isVisited = true\r\n        visitedNodesInOrder.push(minNode)\r\n        console.log(finishNode)\r\n        if(minNode === finishNode) return [visitedNodesInOrder,findPath(finishNode)]\r\n        updateNeighbours(minNode,grid)\r\n    }\r\n\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    let temp = []\r\n    for(let i=0; i < grid.length; i++){\r\n        for(let j=0; j <grid[i].length; j++){\r\n            if(!grid[i][j].isVisited){\r\n                temp.push(grid[i][j])\r\n            }\r\n        }\r\n    }\r\n    return temp\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA,nodeB)=>nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateNeighbours(node,grid){\r\n    const {row,col} = node;\r\n    if(row > 0 && grid[row-1][col].isVisited !== true && grid[row-1][col].distance > node.distance + 1){\r\n        grid[row-1][col].distance = node.distance + 1;\r\n        grid[row-1][col].parentNode = node\r\n    }\r\n    if(row < grid.length-1 && grid[row+1][col] !== true && grid[row+1][col].distance > node.distance + 1){\r\n        grid[row+1][[col]].distance = node.distance + 1\r\n        grid[row+1][col].parentNode = node\r\n    }\r\n    if(col > 0 && grid[row][col-1] !== true && grid[row][col-1].distance > node.distance + 1){\r\n        grid[row][col-1].distance = node.distance + 1\r\n        grid[row][col-1].parentNode = node\r\n    }\r\n    if(col < grid[0].length-1 && grid[row][col+1] !== true && grid[row][col+1].distance > node.distance + 1){\r\n        grid[row][col+1].distance = node.distance + 1\r\n        grid[row][col+1].parentNode = node\r\n    }\r\n}\r\n\r\nfunction findPath(finishNode){\r\n    let temp = []\r\n    while(finishNode.isStart !== true){\r\n        temp.push(finishNode.parentNode)\r\n        finishNode = finishNode.parentNode\r\n    }\r\n    return temp.reverse()\r\n}","import React, { Component } from 'react';\r\nimport Node from './Node';\r\nimport { dijkstra } from '../algorithms/dijkstra';\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            grid:[],\r\n            startNode:{row:15,col:2},\r\n            finishNode:{row:15,col:20},\r\n            mousePressed:false,\r\n            clickedOnStartNode:false,\r\n            clickedOnFinishNode:false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = this.createGrid()\r\n        this.setState({grid})\r\n    }\r\n\r\n    selectStartNode(){\r\n        if(this.state.clickedOnStartNode) this.setState({clickedOnStartNode:false})\r\n        else this.setState({clickedOnStartNode:true})\r\n    }\r\n\r\n    selectFinishNode(){\r\n        if(this.state.clickedOnFinishNode) this.setState({clickedOnFinishNode:false})\r\n        else this.setState({clickedOnFinishNode:true})\r\n    }\r\n\r\n    handleMouseDown(row,col){\r\n        if(this.state.clickedOnStartNode){\r\n            const newGrid = this.state.grid.slice()\r\n            const node1 = newGrid[row][col]\r\n            const node2 = newGrid[this.state.startNode.row][this.state.startNode.col]\r\n            const newNode1 = {\r\n                ...node1,\r\n               isStart:true,\r\n            };\r\n            const newNode2 = {\r\n                ...node2,\r\n                isStart:false\r\n            }\r\n            newGrid[row][col] = newNode1\r\n            newGrid[this.state.startNode.row][this.state.startNode.col] = newNode2\r\n            this.setState({grid:newGrid,startNode:{row,col},clickedOnStartNode:false})\r\n        }\r\n        else if(this.state.clickedOnFinishNode){\r\n            const newGrid = this.state.grid.slice()\r\n            const node1 = newGrid[row][col]\r\n            const node2 = newGrid[this.state.finishNode.row][this.state.finishNode.col]\r\n            const newNode1 = {\r\n                ...node1,\r\n               isFinish:true,\r\n            };\r\n            const newNode2 = {\r\n                ...node2,\r\n                isFinish:false\r\n            }\r\n            newGrid[row][col] = newNode1\r\n            newGrid[this.state.finishNode.row][this.state.finishNode.col] = newNode2\r\n            this.setState({grid:newGrid,finishNode:{row,col},clickedOnFinishNode:false})\r\n        }\r\n        else{\r\n            const newGrid = creatGridWallToglled(this.state.grid,row,col)\r\n            this.setState({grid:newGrid,mousePressed:true})\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row,col){\r\n        if(this.state.mousePressed){\r\n            const newGrid = creatGridWallToglled(this.state.grid,row,col)\r\n            this.setState({grid:newGrid})\r\n        }\r\n    }\r\n\r\n    handleMouseUp(row,col){\r\n        this.setState({mousePressed:false})\r\n    }\r\n\r\n    animateDijkstra(visitedNodes,path){\r\n        for(let i=0;i<=visitedNodes.length;i++){\r\n            if(i===visitedNodes.length){\r\n                setTimeout(()=>{\r\n                    this.animateShortestPath(path)\r\n                },10*i)\r\n                return\r\n            }\r\n            setTimeout(()=>{\r\n             const node = visitedNodes[i]\r\n         const newGrid = this.state.grid.slice();\r\n         const newNode = {\r\n             ...node,\r\n             isVisited:true\r\n         };\r\n         newGrid[node.row][node.col] = newNode\r\n             this.setState({grid:newGrid});\r\n            },10* i);\r\n        }\r\n       }\r\n\r\n    animateShortestPath(path){\r\n        for(let j =0;j<path.length;j++){\r\n            setTimeout(()=>{\r\n                const node = path[j]\r\n                const newGrid = this.state.grid.slice();\r\n                const newNode = {\r\n                    ...node,\r\n                    isVisited:false,\r\n                    isInPath:true\r\n                };\r\n                newGrid[node.row][node.col] = newNode\r\n                    this.setState({grid:newGrid});\r\n        },25*j)\r\n       }\r\n    }\r\n\r\n    visualizeDijkstra(){\r\n       const {grid} = this.state\r\n       const startNode = grid[this.state.startNode.row][this.state.startNode.col]\r\n       const finishNode = grid[this.state.finishNode.row][this.state.finishNode.col]\r\n       console.log(finishNode)\r\n       const [visitedNodes,path] = dijkstra(grid,startNode,finishNode)\r\n       let grid1 = this.refreshGrid()\r\n       this.setState({grid:grid1})\r\n       this.animateDijkstra(visitedNodes,path)\r\n       \r\n    }\r\n\r\n    refreshGrid(){\r\n        const newGrid = this.state.grid.slice()\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                let node = newGrid[row][col]\r\n                const currentNode = {\r\n                    ...node,\r\n                    isVisited:false\r\n                }\r\n                newGrid[row][col] = currentNode\r\n            }\r\n        }\r\n        return newGrid\r\n    }\r\n\r\n    createGrid(){\r\n        let grid = []\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            let currentRow = []\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                let currentNode = {\r\n                    row,\r\n                    col,\r\n                    isStart:row===this.state.startNode.row && col===this.state.startNode.col,\r\n                    isFinish:row===this.state.finishNode.row && col===this.state.finishNode.col,\r\n                    distance:Infinity,\r\n                    isWall:false,\r\n                    isInPath:false,\r\n                    isVisited:false,\r\n                    parentNode:null,\r\n                    isBorder:false\r\n                }\r\n                if(row === 0 || col === 0 || row === 29 || col === 59){\r\n                    currentNode.isBorder = true\r\n                }\r\n                currentRow.push(currentNode)\r\n            }\r\n            grid.push(currentRow)\r\n        }\r\n        return grid\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        let align = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        return(\r\n        <>\r\n        <div style={{marginTop:\"10px\"}}>\r\n        <button onClick={()=>this.visualizeDijkstra()}> Visualize Dijkstra's Algorithm</button>\r\n        <button onClick={()=>this.selectStartNode()} style={{marginLeft:\"5px\",marginRight:\"5px\"}}>\r\n        <div className=\"node-start\"></div>\r\n        <p>Start Node</p>\r\n        </button>\r\n        <button onClick={()=>this.selectFinishNode()}>\r\n        <div className=\"node-finish\"></div>\r\n        <p>Finish Node</p>\r\n        </button>\r\n        <button style={{marginLeft:\"5px\",marginRight:\"5px\"}}>\r\n        <div className=\"node-isWall\" ></div>\r\n        <p>Wall Node</p>\r\n        </button>\r\n        <button onClick={()=>this.componentDidMount()} style={{marginLeft:\"5px\",marginRight:\"5px\"}}> Reset</button>\r\n        <div style={align} className=\"my-3\">\r\n        {\r\n          grid.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {row,isStart,isFinish,isVisited,isInPath,isWall,col,isBorder} = node\r\n                  return (<Node key={nodeIdx} \r\n                    row={row}\r\n                    col={col}\r\n                    isStart={isStart} \r\n                    isFinish={isFinish} \r\n                    isWall={isWall}\r\n                    isVisited={isVisited} \r\n                    isInPath={isInPath} \r\n                    isBorder={isBorder}\r\n                    onMouseDown={(row,col)=>this.handleMouseDown(row,col)}\r\n                    onMouseUp={(row,col)=>this.handleMouseUp(row,col)}\r\n                    onMouseEnter={(row,col)=>this.handleMouseEnter(row,col)}>\r\n                     </Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\nconst creatGridWallToglled = (grid,row,col) => {\r\n    const newGrid = grid.slice()\r\n    console.log(newGrid)\r\n    const node = newGrid[row][col]\r\n    const newNode = {\r\n        ...node,\r\n        isWall:!node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode\r\n    return newGrid\r\n}\r\n","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport './Node.css';\r\n\r\nexport default function header() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n    <div className=\"container-fluid\">\r\n  <Link className=\"navbar-brand\" to=\"/\" style={{fontFamily: 'Staatliches',fontSize:\"30px\"}}>Path Finding Visualizer Tool</Link>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n      </li>\r\n      <li class=\"nav-item dropdown\">\r\n        <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n          Select Algorithm\r\n        </a>\r\n        <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n          <a class=\"dropdown-item\" href=\"#\">Dijkstra</a>\r\n          <a class=\"dropdown-item\" href=\"#\">BFS</a>\r\n          <a class=\"dropdown-item\" href=\"#\">DFS</a>\r\n          <a class=\"dropdown-item\" href=\"#\">Bellmen-Ford</a>\r\n        </div>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <Link className=\"nav-link\" to=\"/about\">How to use</Link>\r\n      </li>\r\n    </ul>\r\n </div>\r\n <p className=\"font-link\">Created by Yash Kerkar<br/>kerkaryash4@gmail.com</p>\r\n </div>\r\n</nav>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About(){\r\n    return(\r\n        <div className=\"container\" style={{marginTop:\"20px\"}}>\r\n            <h1>How to Use this Tool</h1>\r\n            <ul>\r\n                <li>Light Green Node represent Start Node. To change the position of the start node click on start node button at the top then click on the \r\n                    position you want start node on\r\n                </li>\r\n                <li>\r\n                    Red Node represents Finish Node. To change its position follow same procedure as start node.\r\n                </li>\r\n                <li>\r\n                    Black Node represents Wall which means path cannot pass through this node. To create a wall node click directly on the position you want\r\n                     (no need to click on wall node button). You can create multiple wall nodes by clicking and dragging on the nodes. \r\n                </li>\r\n                <li>\r\n                    For visualization click on the visualize button at the top. \r\n                </li>\r\n                <li>\r\n                    The blue nodes forming on the screen show the nodes which are visited by the algorithm in order to find the path\r\n                </li>\r\n                <li>\r\n                    The yellow nodes represent the shortest path from start node to the end node.\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport PathFindVisualizer from './mycomponents/PathFindingVisualizer'\nimport Header from './mycomponents/Header'\nimport About from './mycomponents/About'\nimport {\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <>\n    <Router basename={window.location.pathname || ''}>\n    <Route exact path=\"/\" render={()=>{\n        return(\n          <>\n          <Header/>\n          <div className=\"App\">\n            <PathFindVisualizer i={30} j={60}/>\n          </div>\n          </>\n        )\n    }}></Route>\n    <Route exact path=\"/about\" render={()=>{\n        return(\n          <>\n          <Header/>\n          <About/>\n          </>\n        )\n    }}></Route>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}