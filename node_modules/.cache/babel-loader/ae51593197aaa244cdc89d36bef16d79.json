{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASH\\\\path-find-visualizer\\\\src\\\\my components\\\\PathFindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from './Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 8;\nconst START_NODE_COL = 20;\nconst FINISH_NODE_ROW = 5;\nconst FINISH_NODE_COL = 30;\nexport default class PathFindVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mousePressed: false\n    };\n  }\n\n  componentDidMount() {\n    const newGrid = this.createGrid();\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  animateDijkstra(visitedNodes, path) {\n    for (let i = 0; i < visitedNodes.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodes[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({\n          grid: newGrid\n        });\n      }, 30 * i);\n    }\n    /*for(let j =0;j<path.length;j++){\r\n        setTimeout(()=>{\r\n            const node = path[j]\r\n            const newGrid = this.state.grid.slice();\r\n            const newNode = {\r\n                ...node,\r\n                isVisited:false,\r\n                isInPath:true\r\n            };\r\n            newGrid[node.row][node.col] = newNode\r\n                this.setState({grid:newGrid});\r\n      },100*j)\r\n    }*/\n\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const [visitedNodes, path] = dijkstra(grid, startNode, finishNode);\n    let grid1 = this.createGrid();\n    this.setState({\n      grid: grid1\n    });\n    this.animateDijkstra(visitedNodes, path);\n  }\n\n  createGrid() {\n    let grid = [];\n\n    for (let row = 0; row < this.props.i; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.props.j; col++) {\n        const currentNode = {\n          row,\n          col,\n          isStart: row === START_NODE_ROW && col === START_NODE_COL,\n          isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n          distance: Infinity,\n          isVisited: false,\n          isWall: false,\n          isInPath: false,\n          parentNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  creatGridWallToglled(grid, row, col) {\n    let newGrid = grid.slice();\n    if (newGrid[row][col].isWall) newGrid[row][col].isWall = false;else newGrid[row][col].isWall = true;\n    return newGrid;\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = this.creatGridWallToglled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mousePressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mousePressed) {\n      const newGrid = this.creatGridWallToglled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    this.setState({\n      mousePressed: false\n    });\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    let align = {\n      textAlign: \"center\",\n      fontSize: \"0\"\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \" Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: align,\n        className: \"my-3\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                isStart,\n                isFinish,\n                isVisited,\n                isInPath,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                isStart: isStart,\n                isFinish: isFinish,\n                isWall: isWall,\n                isVisited: isVisited,\n                isInPath: isInPath,\n                handleMouseDown: this.handleMouseDown,\n                handleMouseUp: this.handleMouseUp,\n                handleMouseEnter: this.handleMouseEnter\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 27\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/my components/PathFindingVisualizer.js"],"names":["React","Component","Node","dijkstra","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFindVisualizer","constructor","props","state","grid","mousePressed","componentDidMount","newGrid","createGrid","setState","animateDijkstra","visitedNodes","path","i","length","setTimeout","node","slice","newNode","isVisited","row","col","visualizeDijkstra","startNode","finishNode","grid1","currentRow","j","currentNode","isStart","isFinish","distance","Infinity","isWall","isInPath","parentNode","push","creatGridWallToglled","handleMouseDown","handleMouseEnter","handleMouseUp","render","align","textAlign","fontSize","map","rowIdx","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,wBAAzB;;;AACA,MAAMC,cAAc,GAAG,CAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA,eAAe,MAAMC,kBAAN,SAAiCP,SAAjC,CAA2C;AACtDQ,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAC,EADI;AAETC,MAAAA,YAAY,EAAC;AAFJ,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,UAAMC,OAAO,GAAG,KAAKC,UAAL,EAAhB;AACA,SAAKC,QAAL,CAAc;AAACL,MAAAA,IAAI,EAACG;AAAN,KAAd;AACH;;AAEDG,EAAAA,eAAe,CAACC,YAAD,EAAcC,IAAd,EAAmB;AAC9B,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,YAAY,CAACG,MAA3B,EAAkCD,CAAC,EAAnC,EAAsC;AAClCE,MAAAA,UAAU,CAAC,MAAI;AACd,cAAMC,IAAI,GAAGL,YAAY,CAACE,CAAD,CAAzB;AACJ,cAAMN,OAAO,GAAG,KAAKJ,KAAL,CAAWC,IAAX,CAAgBa,KAAhB,EAAhB;AACA,cAAMC,OAAO,GAAG,EACZ,GAAGF,IADS;AAEZG,UAAAA,SAAS,EAAC;AAFE,SAAhB;AAIAZ,QAAAA,OAAO,CAACS,IAAI,CAACI,GAAN,CAAP,CAAkBJ,IAAI,CAACK,GAAvB,IAA8BH,OAA9B;AACI,aAAKT,QAAL,CAAc;AAACL,UAAAA,IAAI,EAACG;AAAN,SAAd;AACA,OATS,EASR,KAAIM,CATI,CAAV;AAUH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;;AAEJS,EAAAA,iBAAiB,GAAE;AAChB,UAAM;AAAClB,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,UAAMoB,SAAS,GAAGnB,IAAI,CAACR,cAAD,CAAJ,CAAqBC,cAArB,CAAlB;AACA,UAAM2B,UAAU,GAAGpB,IAAI,CAACN,eAAD,CAAJ,CAAsBC,eAAtB,CAAnB;AACA,UAAM,CAACY,YAAD,EAAcC,IAAd,IAAsBjB,QAAQ,CAACS,IAAD,EAAMmB,SAAN,EAAgBC,UAAhB,CAApC;AACA,QAAIC,KAAK,GAAG,KAAKjB,UAAL,EAAZ;AACA,SAAKC,QAAL,CAAc;AAACL,MAAAA,IAAI,EAACqB;AAAN,KAAd;AACA,SAAKf,eAAL,CAAqBC,YAArB,EAAkCC,IAAlC;AAEF;;AAEDJ,EAAAA,UAAU,GAAE;AACR,QAAIJ,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIgB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKlB,KAAL,CAAWW,CAAnC,EAAsCO,GAAG,EAAzC,EAA6C;AACzC,UAAIM,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIL,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKnB,KAAL,CAAWyB,CAAnC,EAAsCN,GAAG,EAAzC,EAA6C;AACzC,cAAMO,WAAW,GAAG;AAChBR,UAAAA,GADgB;AAEhBC,UAAAA,GAFgB;AAGhBQ,UAAAA,OAAO,EAACT,GAAG,KAAGxB,cAAN,IAAwByB,GAAG,KAAIxB,cAHvB;AAIhBiC,UAAAA,QAAQ,EAACV,GAAG,KAAGtB,eAAN,IAAyBuB,GAAG,KAAItB,eAJzB;AAKhBgC,UAAAA,QAAQ,EAACC,QALO;AAMhBb,UAAAA,SAAS,EAAC,KANM;AAOhBc,UAAAA,MAAM,EAAC,KAPS;AAQhBC,UAAAA,QAAQ,EAAC,KARO;AAShBC,UAAAA,UAAU,EAAC;AATK,SAApB;AAWAT,QAAAA,UAAU,CAACU,IAAX,CAAgBR,WAAhB;AACH;;AACDxB,MAAAA,IAAI,CAACgC,IAAL,CAAUV,UAAV;AACH;;AACD,WAAOtB,IAAP;AACH;;AAEDiC,EAAAA,oBAAoB,CAACjC,IAAD,EAAMgB,GAAN,EAAUC,GAAV,EAAc;AAC9B,QAAId,OAAO,GAAGH,IAAI,CAACa,KAAL,EAAd;AACA,QAAGV,OAAO,CAACa,GAAD,CAAP,CAAaC,GAAb,EAAkBY,MAArB,EAA6B1B,OAAO,CAACa,GAAD,CAAP,CAAaC,GAAb,EAAkBY,MAAlB,GAA2B,KAA3B,CAA7B,KACK1B,OAAO,CAACa,GAAD,CAAP,CAAaC,GAAb,EAAkBY,MAAlB,GAA2B,IAA3B;AACL,WAAO1B,OAAP;AACH;;AAED+B,EAAAA,eAAe,CAAClB,GAAD,EAAKC,GAAL,EAAS;AACpB,UAAMd,OAAO,GAAG,KAAK8B,oBAAL,CAA0B,KAAKlC,KAAL,CAAWC,IAArC,EAA0CgB,GAA1C,EAA8CC,GAA9C,CAAhB;AACA,SAAKZ,QAAL,CAAc;AAACL,MAAAA,IAAI,EAACG,OAAN;AAAcF,MAAAA,YAAY,EAAC;AAA3B,KAAd;AACH;;AAEDkC,EAAAA,gBAAgB,CAACnB,GAAD,EAAKC,GAAL,EAAS;AACrB,QAAG,KAAKlB,KAAL,CAAWE,YAAd,EAA2B;AACvB,YAAME,OAAO,GAAG,KAAK8B,oBAAL,CAA0B,KAAKlC,KAAL,CAAWC,IAArC,EAA0CgB,GAA1C,EAA8CC,GAA9C,CAAhB;AACA,WAAKZ,QAAL,CAAc;AAACL,QAAAA,IAAI,EAACG;AAAN,OAAd;AACH;AACJ;;AAEDiC,EAAAA,aAAa,CAACpB,GAAD,EAAKC,GAAL,EAAS;AAClB,SAAKZ,QAAL,CAAc;AAACJ,MAAAA,YAAY,EAAC;AAAd,KAAd;AACH;;AAEDoC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACrC,MAAAA;AAAD,QAAS,KAAKD,KAApB;AACA,QAAIuC,KAAK,GAAG;AACRC,MAAAA,SAAS,EAAC,QADF;AAERC,MAAAA,QAAQ,EAAC;AAFD,KAAZ;AAIA,wBACA;AAAA,8BACA;AAAQ,QAAA,OAAO,EAAE,MAAI,KAAKtB,iBAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,KAAK,EAAEoB,KAAZ;AAAmB,QAAA,SAAS,EAAC,MAA7B;AAAA,kBAEEtC,IAAI,CAACyC,GAAL,CAAS,CAACzB,GAAD,EAAK0B,MAAL,KAAc;AACnB,8BAAO;AAAA,sBACF1B,GAAG,CAACyB,GAAJ,CAAQ,CAAC7B,IAAD,EAAM+B,OAAN,KAAkB;AAC3B,oBAAM;AAAClB,gBAAAA,OAAD;AAASC,gBAAAA,QAAT;AAAkBX,gBAAAA,SAAlB;AAA4Be,gBAAAA,QAA5B;AAAqCD,gBAAAA;AAArC,kBAA+CjB,IAArD;AACA,kCAAQ,QAAC,IAAD;AAAoB,gBAAA,OAAO,EAAEa,OAA7B;AAAsC,gBAAA,QAAQ,EAAEC,QAAhD;AAA0D,gBAAA,MAAM,EAAEG,MAAlE;AACN,gBAAA,SAAS,EAAEd,SADL;AACgB,gBAAA,QAAQ,EAAEe,QAD1B;AACoC,gBAAA,eAAe,EAAE,KAAKI,eAD1D;AAEN,gBAAA,aAAa,EAAE,KAAKE,aAFd;AAE6B,gBAAA,gBAAgB,EAAE,KAAKD;AAFpD,iBAAWQ,OAAX;AAAA;AAAA;AAAA;AAAA,sBAAR;AAGC,aALA;AADE,aAAUD,MAAV;AAAA;AAAA;AAAA;AAAA,kBAAP;AAQH,SATD;AAFF;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBADA;AAmBH;;AA7HqD","sourcesContent":["import React, { Component } from 'react';\r\nimport Node from './Node';\r\nimport { dijkstra } from '../algorithms/dijkstra';\r\nconst START_NODE_ROW = 8;\r\nconst START_NODE_COL = 20;\r\nconst FINISH_NODE_ROW = 5;\r\nconst FINISH_NODE_COL = 30;\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            grid:[],\r\n            mousePressed:false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const newGrid = this.createGrid()\r\n        this.setState({grid:newGrid})\r\n    }\r\n\r\n    animateDijkstra(visitedNodes,path){\r\n        for(let i=0;i<visitedNodes.length;i++){\r\n            setTimeout(()=>{\r\n             const node = visitedNodes[i]\r\n         const newGrid = this.state.grid.slice();\r\n         const newNode = {\r\n             ...node,\r\n             isVisited:true\r\n         };\r\n         newGrid[node.row][node.col] = newNode\r\n             this.setState({grid:newGrid});\r\n            },30* i);\r\n        }\r\n        /*for(let j =0;j<path.length;j++){\r\n            setTimeout(()=>{\r\n                const node = path[j]\r\n                const newGrid = this.state.grid.slice();\r\n                const newNode = {\r\n                    ...node,\r\n                    isVisited:false,\r\n                    isInPath:true\r\n                };\r\n                newGrid[node.row][node.col] = newNode\r\n                    this.setState({grid:newGrid});\r\n\r\n        },100*j)\r\n       }*/\r\n       }\r\n\r\n    visualizeDijkstra(){\r\n       const {grid} = this.state\r\n       const startNode = grid[START_NODE_ROW][START_NODE_COL]\r\n       const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL]\r\n       const [visitedNodes,path] = dijkstra(grid,startNode,finishNode)\r\n       let grid1 = this.createGrid()\r\n       this.setState({grid:grid1})\r\n       this.animateDijkstra(visitedNodes,path)\r\n       \r\n    }\r\n\r\n    createGrid(){\r\n        let grid = [];\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            let currentRow = []\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                const currentNode = {\r\n                    row,\r\n                    col,\r\n                    isStart:row===START_NODE_ROW && col=== START_NODE_COL,\r\n                    isFinish:row===FINISH_NODE_ROW && col=== FINISH_NODE_COL,\r\n                    distance:Infinity,\r\n                    isVisited:false,\r\n                    isWall:false,\r\n                    isInPath:false,\r\n                    parentNode:null\r\n                }\r\n                currentRow.push(currentNode)\r\n            }\r\n            grid.push(currentRow)\r\n        }\r\n        return grid\r\n    }\r\n\r\n    creatGridWallToglled(grid,row,col){\r\n        let newGrid = grid.slice()\r\n        if(newGrid[row][col].isWall) newGrid[row][col].isWall = false\r\n        else newGrid[row][col].isWall = true\r\n        return newGrid\r\n    }\r\n    \r\n    handleMouseDown(row,col){\r\n        const newGrid = this.creatGridWallToglled(this.state.grid,row,col)\r\n        this.setState({grid:newGrid,mousePressed:true})\r\n    }\r\n\r\n    handleMouseEnter(row,col){\r\n        if(this.state.mousePressed){\r\n            const newGrid = this.creatGridWallToglled(this.state.grid,row,col)\r\n            this.setState({grid:newGrid})\r\n        }\r\n    }\r\n\r\n    handleMouseUp(row,col){\r\n        this.setState({mousePressed:false})\r\n    }\r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        let align = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        return(\r\n        <>\r\n        <button onClick={()=>this.visualizeDijkstra()}> Visualize Dijkstra's Algorithm</button>\r\n        <div style={align} className=\"my-3\">\r\n        {\r\n          grid.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {isStart,isFinish,isVisited,isInPath,isWall} = node\r\n                  return (<Node key={nodeIdx} isStart={isStart} isFinish={isFinish} isWall={isWall}\r\n                    isVisited={isVisited} isInPath={isInPath} handleMouseDown={this.handleMouseDown}\r\n                    handleMouseUp={this.handleMouseUp} handleMouseEnter={this.handleMouseEnter}></Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}