{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  let i = 0;\n\n  while (i < unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateNeighbours(closestNode, grid);\n  }\n}\n\nfunction getAllNodes(grid) {\n  let temp = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (!grid[i][j].isVisited) {\n        temp.push(grid[i][j]);\n      }\n    }\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbours(node, grid) {\n  const {\n    row,\n    col\n  } = node;\n\n  if (row > 0 && grid[row - 1][col].isVisited !== true && grid[row - 1][col].distance > node.distance + 1) {\n    grid[row - 1][col].distance = node.distance + 1;\n  }\n\n  if (row < grid.length && grid[row + 1][col] !== true && grid[row + 1][col].distance > node.distance + 1) {\n    grid[row + 1][[col]].distance = node.distance + 1;\n  }\n\n  if (col > 0 && grid[row][col - 1] !== true && grid[row][col - 1].distance > node.distance + 1) {\n    grid[row][col - 1].distance = node.distance + 1;\n  }\n\n  if (col < grid[0].length && grid[row][col + 1] !== true && grid[row][col + 1].distance > node.distance + 1) {\n    grid[row][col + 1].distance = node.distance + 1;\n  }\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","i","length","sortNodesByDistance","closestNode","shift","isVisited","push","updateNeighbours","temp","j","sort","nodeA","nodeB","node","row","col"],"mappings":"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","sourcesContent":["export function dijkstra(grid,startNode,finishNode){\r\n    const visitedNodesInOrder = []\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    let i = 0;\r\n    while(i < unvisitedNodes.length){\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift()\r\n        closestNode.isVisited = true\r\n        visitedNodesInOrder.push(closestNode)\r\n        if(closestNode === finishNode) return visitedNodesInOrder\r\n        updateNeighbours(closestNode,grid)\r\n    }\r\n\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    let temp = []\r\n    for(let i=0; i < grid.length; i++){\r\n        for(let j=0; j <grid[i].length; j++){\r\n            if(!grid[i][j].isVisited){\r\n                temp.push(grid[i][j])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA,nodeB)=>nodeA.distance - nodeB.distance)\r\n}\r\n\r\nfunction updateNeighbours(node,grid){\r\n    const {row,col} = node;\r\n    if(row > 0 && grid[row-1][col].isVisited !== true && grid[row-1][col].distance > node.distance + 1){\r\n        grid[row-1][col].distance = node.distance + 1;\r\n    }\r\n    if(row < grid.length && grid[row+1][col] !== true && grid[row+1][col].distance > node.distance + 1){\r\n        grid[row+1][[col]].distance = node.distance + 1\r\n    }\r\n    if(col > 0 && grid[row][col-1] !== true && grid[row][col-1].distance > node.distance + 1){\r\n        grid[row][col-1].distance = node.distance + 1\r\n    }\r\n    if(col < grid[0].length && grid[row][col+1] !== true && grid[row][col+1].distance > node.distance + 1){\r\n        grid[row][col+1].distance = node.distance + 1\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}