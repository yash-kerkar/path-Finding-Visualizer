{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASH\\\\path-find-visualizer\\\\src\\\\my components\\\\PathFindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from './Node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class PathFindVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    let nodes = [];\n\n    for (let row = 0; row < this.props.i; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.props.j; col++) {\n        const currentNode = {\n          row,\n          col,\n          isStart: row === 10 && col === 20,\n          isFinish: row === 5 && col === 50\n        };\n        currentRow.push(currentNode);\n      }\n\n      nodes.push(row);\n      console.log(nodes);\n    }\n\n    this.setState({\n      nodes: nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    let grid = {\n      textAlign: \"center\",\n      fontSize: \"0\"\n    };\n    console.log(nodes[0]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: grid,\n      className: \"my-3\",\n      children: nodes.map((row, rowIdx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((node, nodeIdx) => {\n            const {\n              isStart,\n              isFinish\n            } = node;\n            return /*#__PURE__*/_jsxDEV(Node, {\n              isStart: isStart,\n              isFinish: isFinish\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 27\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 22\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/my components/PathFindingVisualizer.js"],"names":["React","Component","Node","PathFindVisualizer","constructor","props","state","nodes","componentDidMount","row","i","currentRow","col","j","currentNode","isStart","isFinish","push","console","log","setState","render","grid","textAlign","fontSize","map","rowIdx","node","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,eAAe,MAAMC,kBAAN,SAAiCF,SAAjC,CAA2C;AACtDG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAC;AAAP,KAAb;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,QAAID,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKJ,KAAL,CAAWK,CAAnC,EAAsCD,GAAG,EAAzC,EAA6C;AACzC,UAAIE,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKP,KAAL,CAAWQ,CAAnC,EAAsCD,GAAG,EAAzC,EAA6C;AACzC,cAAME,WAAW,GAAG;AAChBL,UAAAA,GADgB;AAEhBG,UAAAA,GAFgB;AAGhBG,UAAAA,OAAO,EAACN,GAAG,KAAG,EAAN,IAAYG,GAAG,KAAG,EAHV;AAIhBI,UAAAA,QAAQ,EAACP,GAAG,KAAG,CAAN,IAAWG,GAAG,KAAG;AAJV,SAApB;AAMAD,QAAAA,UAAU,CAACM,IAAX,CAAgBH,WAAhB;AACH;;AACDP,MAAAA,KAAK,CAACU,IAAN,CAAWR,GAAX;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACH;;AACD,SAAKa,QAAL,CAAc;AAACb,MAAAA,KAAK,EAACA;AAAP,KAAd;AACH;;AAEDc,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACd,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACA,QAAIgB,IAAI,GAAG;AACPC,MAAAA,SAAS,EAAC,QADH;AAEPC,MAAAA,QAAQ,EAAC;AAFF,KAAX;AAIAN,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAAC,CAAD,CAAjB;AACA,wBACA;AAAK,MAAA,KAAK,EAAEe,IAAZ;AAAkB,MAAA,SAAS,EAAC,MAA5B;AAAA,gBAEEf,KAAK,CAACkB,GAAN,CAAU,CAAChB,GAAD,EAAKiB,MAAL,KAAc;AACpB,4BAAO;AAAA,oBACFjB,GAAG,CAACgB,GAAJ,CAAQ,CAACE,IAAD,EAAMC,OAAN,KAAkB;AAC3B,kBAAM;AAACb,cAAAA,OAAD;AAASC,cAAAA;AAAT,gBAAqBW,IAA3B;AACA,gCAAQ,QAAC,IAAD;AAAoB,cAAA,OAAO,EAAEZ,OAA7B;AAAsC,cAAA,QAAQ,EAAEC;AAAhD,eAAWY,OAAX;AAAA;AAAA;AAAA;AAAA,oBAAR;AACC,WAHA;AADE,WAAUF,MAAV;AAAA;AAAA;AAAA;AAAA,gBAAP;AAMH,OAPD;AAFF;AAAA;AAAA;AAAA;AAAA,YADA;AAcH;;AA9CqD","sourcesContent":["import React, { Component } from 'react';\r\nimport Node from './Node';\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {nodes:[]};\r\n    }\r\n\r\n    componentDidMount(){\r\n        let nodes = [];\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            let currentRow = []\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                const currentNode = {\r\n                    row,\r\n                    col,\r\n                    isStart:row===10 && col===20,\r\n                    isFinish:row===5 && col===50\r\n                }\r\n                currentRow.push(currentNode)\r\n            }\r\n            nodes.push(row)\r\n            console.log(nodes)\r\n        }\r\n        this.setState({nodes:nodes})\r\n    }\r\n\r\n    render(){\r\n        const {nodes} = this.state;\r\n        let grid = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        console.log(nodes[0])\r\n        return(\r\n        <div style={grid} className=\"my-3\">\r\n        {\r\n          nodes.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {isStart,isFinish} = node\r\n                  return (<Node key={nodeIdx} isStart={isStart} isFinish={isFinish}></Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}