{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASH\\\\path-find-visualizer\\\\src\\\\mycomponents\\\\PathFindingVisualizer.js\";\nimport React, { Component } from 'react';\nimport Node from './Node';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class PathFindVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {\n        row: 15,\n        col: 0\n      },\n      finishNode: {\n        row: 15,\n        col: 59\n      },\n      mousePressed: false,\n      clickedOnStartNode: false\n    };\n  }\n\n  selectStartNode() {\n    if (this.state.clickedOnStartNode) this.setState({\n      clickedOnStartNode: false\n    });else this.setState({\n      clickedOnStartNode: true\n    });\n  }\n\n  componentDidMount() {\n    const grid = this.createGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    if (!this.state.clickedOnStartNode) {\n      /*const newGrid = creatGridWallToglled(this.state.grid,row,col)*/\n      creatGridWallToglled(this.state.grid, row, col);\n      this.setState({\n        mousePressed: true\n      });\n    } else {\n      document.getElementById('node-' + this.state.startNode.row + '-' + this.state.startNode.col).className = 'node';\n      document.getElementById('node-' + row + '-' + col).className = 'node-start';\n      this.setState({\n        clickedOnStartNode: false\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mousePressed) {\n      const newGrid = creatGridWallToglled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    this.setState({\n      mousePressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodes, path) {\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          this.animateShortestPath(path);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        /*const node = visitedNodes[i]\r\n        const newGrid = this.state.grid.slice();\r\n        const newNode = {\r\n        ...node,\r\n        isVisited:true\r\n        };\r\n        newGrid[node.row][node.col] = newNode\r\n        this.setState({grid:newGrid});*/\n        document.getElementById('node-' + visitedNodes[i].row + '-' + visitedNodes[i].col).className = 'node-isVisited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(path) {\n    for (let j = 0; j < path.length; j++) {\n      setTimeout(() => {\n        /*const node = path[j]\r\n        const newGrid = this.state.grid.slice();\r\n        const newNode = {\r\n            ...node,\r\n            isVisited:false,\r\n            isInPath:true\r\n        };\r\n        newGrid[node.row][node.col] = newNode\r\n            this.setState({grid:newGrid});*/\n        document.getElementById('node-' + path[j].row + '-' + path[j].col).className = 'node-inPath';\n      }, 25 * j);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[this.state.startNode.row][this.state.startNode.col];\n    const finishNode = grid[this.state.finishNode.col][this.state.finishNode.col];\n    const [visitedNodes, path] = dijkstra(grid, startNode, finishNode);\n    let grid1 = this.refreshGrid();\n    this.setState({\n      grid: grid1\n    });\n    this.animateDijkstra(visitedNodes, path);\n  }\n\n  refreshGrid() {\n    const newGrid = this.state.grid.slice();\n\n    for (let row = 0; row < this.props.i; row++) {\n      for (let col = 0; col < this.props.j; col++) {\n        let node = newGrid[row][col];\n        const currentNode = { ...node,\n          isVisited: false\n        };\n        newGrid[row][col] = currentNode;\n      }\n    }\n\n    return newGrid;\n  }\n\n  createGrid() {\n    let grid = [];\n\n    for (let row = 0; row < this.props.i; row++) {\n      let currentRow = [];\n\n      for (let col = 0; col < this.props.j; col++) {\n        let currentNode = {\n          row,\n          col,\n          isStart: row === this.state.startNode.row && col === this.state.startNode.col,\n          isFinish: row === this.state.finishNode.row && col === this.state.finishNode.col,\n          distance: Infinity,\n          isWall: false,\n          isInPath: false,\n          isVisited: false,\n          parentNode: null\n        };\n        currentRow.push(currentNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    let align = {\n      textAlign: \"center\",\n      fontSize: \"0\"\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \" Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.selectStartNode(),\n        style: {\n          marginLeft: \"5px\",\n          marginRight: \"5px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Start Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onclick(\"finish\"),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-finish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Finish Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: align,\n        className: \"my-3\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                isStart,\n                isFinish,\n                isVisited,\n                isInPath,\n                isWall,\n                col\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                row: row,\n                col: col,\n                isStart: isStart,\n                isFinish: isFinish,\n                isWall: isWall,\n                isVisited: isVisited,\n                isInPath: isInPath,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseUp: (row, col) => this.handleMouseUp(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col)\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 27\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst creatGridWallToglled = (grid, row, col) => {\n  /*const newGrid = grid.slice()\r\n  console.log(newGrid)\r\n  const node = newGrid[row][col]\r\n  const newNode = {\r\n      ...node,\r\n      isWall:!node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode*/\n  if (document.getElementById('node-' + row + '-' + col).className.isWall) document.getElementById('node-' + row + '-' + col).className.isWall = false;else document.getElementById('node-' + row + '-' + col).className.isWall = true;\n};","map":{"version":3,"sources":["C:/Users/YASH/path-find-visualizer/src/mycomponents/PathFindingVisualizer.js"],"names":["React","Component","Node","dijkstra","PathFindVisualizer","constructor","props","state","grid","startNode","row","col","finishNode","mousePressed","clickedOnStartNode","selectStartNode","setState","componentDidMount","createGrid","handleMouseDown","creatGridWallToglled","document","getElementById","className","handleMouseEnter","newGrid","handleMouseUp","animateDijkstra","visitedNodes","path","i","length","setTimeout","animateShortestPath","j","visualizeDijkstra","grid1","refreshGrid","slice","node","currentNode","isVisited","currentRow","isStart","isFinish","distance","Infinity","isWall","isInPath","parentNode","push","render","align","textAlign","fontSize","marginLeft","marginRight","onclick","map","rowIdx","nodeIdx"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Node from './Node';\r\nimport { dijkstra } from '../algorithms/dijkstra';\r\n\r\nexport default class PathFindVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            grid:[],\r\n            startNode:{row:15,col:0},\r\n            finishNode:{row:15,col:59},\r\n            mousePressed:false,\r\n            clickedOnStartNode:false\r\n        };\r\n    }\r\n\r\n    selectStartNode(){\r\n        if(this.state.clickedOnStartNode) this.setState({clickedOnStartNode:false})\r\n        else this.setState({clickedOnStartNode:true})\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = this.createGrid()\r\n        this.setState({grid})\r\n    }\r\n\r\n    handleMouseDown(row,col){\r\n        if(!this.state.clickedOnStartNode){\r\n        /*const newGrid = creatGridWallToglled(this.state.grid,row,col)*/\r\n        creatGridWallToglled(this.state.grid,row,col)\r\n        this.setState({mousePressed:true})\r\n        }\r\n        else{\r\n            document.getElementById('node-'+this.state.startNode.row+'-'+this.state.startNode.col).className = 'node'\r\n            document.getElementById('node-'+row+'-'+col).className = 'node-start'\r\n            this.setState({clickedOnStartNode:false})\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row,col){\r\n        if(this.state.mousePressed){\r\n            const newGrid = creatGridWallToglled(this.state.grid,row,col)\r\n            this.setState({grid:newGrid})\r\n        }\r\n    }\r\n\r\n    handleMouseUp(row,col){\r\n        this.setState({mousePressed:false})\r\n    }\r\n\r\n    animateDijkstra(visitedNodes,path){\r\n        for(let i=0;i<=visitedNodes.length;i++){\r\n            if(i===visitedNodes.length){\r\n                setTimeout(()=>{\r\n                    this.animateShortestPath(path)\r\n                },10*i)\r\n                return\r\n            }\r\n            setTimeout(()=>{\r\n             /*const node = visitedNodes[i]\r\n         const newGrid = this.state.grid.slice();\r\n         const newNode = {\r\n             ...node,\r\n             isVisited:true\r\n         };\r\n         newGrid[node.row][node.col] = newNode\r\n             this.setState({grid:newGrid});*/\r\n             document.getElementById('node-'+visitedNodes[i].row+'-'+visitedNodes[i].col).className = 'node-isVisited'\r\n            },10* i);\r\n        }\r\n       }\r\n\r\n    animateShortestPath(path){\r\n        for(let j =0;j<path.length;j++){\r\n            setTimeout(()=>{\r\n                /*const node = path[j]\r\n                const newGrid = this.state.grid.slice();\r\n                const newNode = {\r\n                    ...node,\r\n                    isVisited:false,\r\n                    isInPath:true\r\n                };\r\n                newGrid[node.row][node.col] = newNode\r\n                    this.setState({grid:newGrid});*/\r\n            document.getElementById('node-'+path[j].row+'-'+path[j].col).className = 'node-inPath'\r\n\r\n        },25*j)\r\n       }\r\n    }\r\n\r\n    visualizeDijkstra(){\r\n       const {grid} = this.state\r\n       const startNode = grid[this.state.startNode.row][this.state.startNode.col]\r\n       const finishNode = grid[this.state.finishNode.col][this.state.finishNode.col]\r\n       const [visitedNodes,path] = dijkstra(grid,startNode,finishNode)\r\n       let grid1 = this.refreshGrid()\r\n       this.setState({grid:grid1})\r\n       this.animateDijkstra(visitedNodes,path)\r\n       \r\n    }\r\n\r\n    refreshGrid(){\r\n        const newGrid = this.state.grid.slice()\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                let node = newGrid[row][col]\r\n                const currentNode = {\r\n                    ...node,\r\n                    isVisited:false\r\n                }\r\n                newGrid[row][col] = currentNode\r\n            }\r\n        }\r\n        return newGrid\r\n    }\r\n\r\n    createGrid(){\r\n        let grid = []\r\n        for (let row = 0; row < this.props.i; row++) {\r\n            let currentRow = []\r\n            for (let col = 0; col < this.props.j; col++) {\r\n                let currentNode = {\r\n                    row,\r\n                    col,\r\n                    isStart:row===this.state.startNode.row && col===this.state.startNode.col,\r\n                    isFinish:row===this.state.finishNode.row && col===this.state.finishNode.col,\r\n                    distance:Infinity,\r\n                    isWall:false,\r\n                    isInPath:false,\r\n                    isVisited:false,\r\n                    parentNode:null\r\n                }\r\n                currentRow.push(currentNode)\r\n            }\r\n            grid.push(currentRow)\r\n        }\r\n        return grid\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        let align = {\r\n            textAlign:\"center\",\r\n            fontSize:\"0\"\r\n        }\r\n        return(\r\n        <>\r\n        <button onClick={()=>this.visualizeDijkstra()}> Visualize Dijkstra's Algorithm</button>\r\n        <button onClick={()=>this.selectStartNode()} style={{marginLeft:\"5px\",marginRight:\"5px\"}}>\r\n        <div className=\"node-start\"></div>\r\n        <p>Start Node</p>\r\n        </button>\r\n        <button onClick={()=>onclick(\"finish\")}>\r\n        <div className=\"node-finish\"></div>\r\n        <p>Finish Node</p>\r\n        </button>\r\n        <div style={align} className=\"my-3\">\r\n        {\r\n          grid.map((row,rowIdx)=>{\r\n              return <div key={rowIdx}>\r\n                  {row.map((node,nodeIdx) => {\r\n                  const {row,isStart,isFinish,isVisited,isInPath,isWall,col} = node\r\n                  return (<Node key={nodeIdx} \r\n                    row={row}\r\n                    col={col}\r\n                    isStart={isStart} \r\n                    isFinish={isFinish} \r\n                    isWall={isWall}\r\n                    isVisited={isVisited} \r\n                    isInPath={isInPath} \r\n                    onMouseDown={(row,col)=>this.handleMouseDown(row,col)}\r\n                    onMouseUp={(row,col)=>this.handleMouseUp(row,col)}\r\n                    onMouseEnter={(row,col)=>this.handleMouseEnter(row,col)}>\r\n                     </Node>)\r\n                  })}\r\n              </div>\r\n          })\r\n        }\r\n        </div>\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\nconst creatGridWallToglled = (grid,row,col) => {\r\n    /*const newGrid = grid.slice()\r\n    console.log(newGrid)\r\n    const node = newGrid[row][col]\r\n    const newNode = {\r\n        ...node,\r\n        isWall:!node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode*/\r\n\r\n    if(document.getElementById('node-'+row+'-'+col).className.isWall) document.getElementById('node-'+row+'-'+col).className.isWall = false\r\n    else document.getElementById('node-'+row+'-'+col).className.isWall = true\r\n}\r\n"]},"metadata":{},"sourceType":"module"}